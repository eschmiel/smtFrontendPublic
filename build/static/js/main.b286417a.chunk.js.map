{"version":3,"sources":["components/login/loginMenu.js","components/login/loginForm.js","components/login/createAccountForm.js","components/notLoggedIn.js","components/linkFirstAccount.js","components/tweets/tweetTitleform.js","components/tweets/twitterAccountForm.js","components/tweets/tweetTextForm.js","components/tweets/tweetEditMenu.js","components/tweets/tweetForm.js","components/tweets/newTweet.js","components/firstTweet.js","components/submenu/settingsMenu.js","components/account.js","components/accountList.js","components/submenu/linkedAccountsMenu.js","components/submenu/unlinkAccountMenu/unlinkAccountConfirmMenu.js","components/submenu/unlinkAccountMenu/unlinkAccountSelectMenu.js","components/submenu/unlinkAccountMenu/unlinkAccountMenu.js","components/submenu/deleteAccountConfirmMenu.js","components/submenu/submenu.js","components/menu.js","components/tweets/tweetTitle.js","components/tweets/twitterAccount.js","components/tweets/tweetText.js","components/tweets/tweetDisplayMenu.js","components/tweets/tweetDisplay.js","components/tweets/tweetEdit.js","components/tweets/tweetDeleteMenu.js","components/tweets/tweet.js","components/loggedIn.js","components/securityWarning.js","App.js","serviceWorker.js","index.js"],"names":["LoginMenu","props","handleMenuStateChange","bind","this","onMenuStateChange","className","onClick","React","Component","LoginForm","handleUsernameChange","handlePasswordChange","handleSubmit","handleLogin","state","username","password","onLogin","event","setState","target","value","preventDefault","loginData","FormData","append","request","Request","method","credentials","body","fetch","response","json","data","onSubmit","for","type","onChange","required","CreateAccountForm","handleFormChange","name","console","log","newUserData","createUserRequest","loginRequest","id","NotLoggedIn","menuState","newState","src","alt","LinkFirstAccount","authorizationLink","then","text","link","href","TweetTitleForm","handleChange","tweet_title","TwitterAccountForm","options","twitterAccounts","map","account","account_id","screen_name","TweetTextForm","style","height","tweet_text","TweetEditMenu","cancel","onChangeTweetState","TweetForm","defaultTweetValues","formOptions","formData","Object","assign","tweet","addedSubmitData","submitRequestUrl","handlePostSubmit","onCancel","formEdits","propertyEdit","newTweetData","entries","key","requestUrl","res","NewTweet","setButtonState","setCreateTweetState","postCreateTweetFormSubmit","componentState","updateTweets","FirstTweet","SettingsMenu","fontWeight","changeSubmenuState","Account","handleSelect","onSelect","accountStatus","selected","AccountList","accountList","accounts","accountData","LinkedAccountsMenu","linkedAccounts","UnlinkAccountConfirmMenu","selectedAccounts","onConfirm","UnlinkAccountSelectMenu","unlinkAccountMenuItems","UnlinkAccountsMenu","unlinkAccountMenuItemsHelper","twitterAccount","changeMenuState","handleSelectMenuConfirm","select","getSelectedAccounts","unlinkAccount","length","indexOfSelected","findIndex","unlinkAccountMenuItemsEdits","index","filter","requestData","forEach","unlinkRequest","refreshLinkedAccounts","refreshTweets","DeleteAccountConfirmMenu","handleDelete","onLogout","Submenu","manageSubmenuState","currentState","twitter_accounts","Menu","submenuState","logout","expirationDate","Date","document","cookie","toUTCString","TweetTitle","TwitterAccount","twitter_account","TweetText","TweetDisplayMenu","setEditState","setDeleteState","TweetDisplay","toggleTweet","post_id","updatedTweet","processedUpdatedTweet","refreshTweet","find","active_status","TweetEdit","handleReturnedEditedTweet","TweetDeleteMenu","requestTweetDelete","Tweet","setTweetState","tweetState","newTweetState","edits","tweetEdits","currentTweet","clone","require","LoggedIn","tweets","getLinkedAccounts","getTweets","buildTweetComponents","tweetObjs","element","editsContainer","SecurityWarning","App","setUsername","split","newUsername","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b286417a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass LoginMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleMenuStateChange = this.handleMenuStateChange.bind(this);\r\n    }\r\n\r\n\r\n    handleMenuStateChange() {\r\n        this.props.onMenuStateChange('CreatingAccount');\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div className=\"CreateAccountBtn MenuBtn\" onClick={this.handleMenuStateChange}> Create Account </div>;\r\n    }\r\n}\r\n\r\n\r\nexport default LoginMenu;","import React from 'react';\r\nimport '../../css/login/AccountForm.css';\r\n\r\nclass LoginForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleUsernameChange = this.handleUsernameChange.bind(this);\r\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n\r\n        this.state = {\r\n            username: '',\r\n            password: ''\r\n        };\r\n    }\r\n\r\n\r\n    handleLogin(username) {\r\n        this.props.onLogin(username);\r\n    }\r\n\r\n\r\n    handleUsernameChange(event) {\r\n        this.setState({ username: event.target.value });\r\n    }\r\n\r\n\r\n    handlePasswordChange(event) {\r\n        this.setState({ password: event.target.value });\r\n    }\r\n\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        let loginData = new FormData();\r\n\r\n        loginData.append(\"username\", this.state.username);\r\n        loginData.append(\"password\", this.state.password);\r\n        \r\n        let request = new Request('https://streamtoggle-backend.herokuapp.com/login',\r\n            {\r\n                method: 'POST',\r\n                credentials: 'include',\r\n                body: loginData\r\n            });\r\n\r\n        let response = await fetch(request, { credentials: 'include' } );\r\n        let data = await response.json();\r\n        this.handleLogin(data.username);        \r\n    }\r\n\r\n\r\n    render() {       \r\n        return (\r\n            <div className=\"AccountFormContainer\">\r\n                <form onSubmit={this.handleSubmit} className=\"AccountForm\">\r\n                    <ul>\r\n                        <li >\r\n                            <label for=\"username\">Username: </label>\r\n                            <input type=\"text\" value={this.state.value} onChange={this.handleUsernameChange} required />\r\n                        </li>\r\n                        <li>\r\n                            <label for=\"password\">Password: </label>\r\n                            <input type=\"password\" value={this.state.value} onChange={this.handlePasswordChange} required />\r\n                        </li>\r\n                        <li>\r\n                            <button type=\"submit\" className=\"ContentBtn\">Login </button>\r\n                        </li>\r\n                    </ul>\r\n                </form>\r\n                <div className=\"RecoverPasswordBtn\">Recover Password</div>\r\n            </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginForm;","import React from 'react';\r\nimport '../../css/login/AccountForm.css';\r\n\r\nclass CreateAccountForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: '',\r\n            password: ''\r\n        };\r\n\r\n        this.handleFormChange = this.handleFormChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleMenuStateChange = this.handleMenuStateChange.bind(this);\r\n    }\r\n\r\n\r\n    handleFormChange(event) {\r\n        switch (event.target.name) {\r\n            case 'username': this.setState({ username: event.target.value }); break;\r\n            case 'password': this.setState({ password: event.target.value }); break;\r\n            default: console.log(\"Attemped to set state on something that is not a create account form field\"); break;\r\n        }\r\n    }\r\n\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        let newUserData = new FormData();\r\n\r\n        newUserData.append('username', this.state.username);\r\n        newUserData.append('password', this.state.password);\r\n\r\n        let createUserRequest = new Request('https://streamtoggle-backend.herokuapp.com/account/createUserAccount',\r\n            {\r\n                method: 'POST',\r\n                credentials: 'include',\r\n                body: newUserData\r\n            });\r\n\r\n        await fetch(createUserRequest);\r\n\r\n        let loginRequest = new Request('https://streamtoggle-backend.herokuapp.com/login',\r\n            {\r\n                method: 'POST',\r\n                credentials: 'include',\r\n                body: newUserData,                \r\n            });\r\n\r\n        let response = await fetch(loginRequest);\r\n        let data = await response.json();\r\n        this.props.onLogin(data.username);\r\n    }\r\n\r\n\r\n    handleMenuStateChange() {\r\n        this.props.onMenuStateChange('LoggingIn');\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"CreateAccountContent\">\r\n                \r\n                <div className=\"AccountFormContainer\">\r\n                    <h2>Create Account</h2>\r\n                    <form className=\"AccountForm\" onSubmit={this.handleSubmit} >\r\n                        <ul>\r\n                            <li>\r\n                                <label for=\"username\">Username: </label>\r\n                                <input type=\"text\" id=\"username\" name=\"username\" value={this.state.username} onChange={this.handleFormChange} required />\r\n                            </li>\r\n                            <li>\r\n                                <label for=\"password\">Password: </label>\r\n                                <input type=\"text\" id=\"password\" name=\"password\" value={this.state.password} onChange={this.handleFormChange} required />\r\n                            </li>\r\n                            <li className=\"CreateAccountFormBtns\">\r\n                                <button type=\"submit\" className=\"ContentBtn\">Create Account</button>\r\n                                <button type=\"button\" className=\"ContentBtn\" onClick={this.handleMenuStateChange}>Cancel</button>\r\n                            </li>\r\n                        </ul>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateAccountForm;","import React from 'react';\r\nimport LoginMenu from './login/loginMenu.js';\r\nimport LoginForm from './login/loginForm.js';\r\nimport CreateAccountForm from './login/createAccountForm.js';\r\n\r\nclass NotLoggedIn extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleMenuStateChange = this.handleMenuStateChange.bind(this);\r\n        this.state = { menuState: 'LoggingIn' };\r\n    }\r\n\r\n\r\n    handleMenuStateChange(newState) {\r\n        if ( newState === 'LoggingIn' || 'CreatingAccount' ) this.setState({ menuState: newState });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"Menubar\">\r\n                    <img src=\"./images/smt-logo.png\" alt=\"Social Media Toggle by Schmiel logo\" className=\"logo\" />\r\n                    {this.state.menuState === \"LoggingIn\" ? <LoginMenu onMenuStateChange={this.handleMenuStateChange} /> : ''}\r\n                </div>\r\n             \r\n                {\r\n                    this.state.menuState === \"LoggingIn\" ? <LoginForm onLogin={this.props.onLogin} /> :\r\n                    this.state.menuState === \"CreatingAccount\" ? <CreateAccountForm onMenuStateChange={this.handleMenuStateChange} onLogin={this.props.onLogin} /> : ''\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default NotLoggedIn;","import React from 'react';\r\nimport '../css/FreshAccount.css';\r\n\r\n\r\nclass LinkFirstAccount extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { authorizationLink : '' };\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        fetch('https://streamtoggle-backend.herokuapp.com/account/linkTwitterAccount', { method: 'GET', credentials: 'include' }).then(response => response.text()).then(link => this.setState({ authorizationLink: link }));\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"PromptContainer\">\r\n                <h3>Link your Twitter Account</h3>\r\n                <a href={this.state.authorizationLink}>\r\n                    <div className=\"SubmenuBtn\">Link Account</div>\r\n                </a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default LinkFirstAccount;","import React from 'react';\r\nimport '../../css/tweets/TweetTitle.css';\r\n\r\nclass TweetTitleForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.props.handleChange(event);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"TweetTitle\">     \r\n                <input type=\"text\" id=\"TweetTitle\" name=\"tweetTitle\" value={this.props.tweet_title} onChange={this.handleChange} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TweetTitleForm;","import React from 'react';\r\nimport '../../css/tweets/TwitterAccountForm.css';\r\n\r\nclass TwitterAccountForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n\r\n        this.options = props.twitterAccounts.map(account => <option value={account.account_id}> {account.screen_name} </option>);\r\n\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.props.handleChange(event);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"TwitterAccount\">\r\n                <h3>Twitter:</h3>\r\n                <select id=\"TwitterAccount\" name=\"twitterAccount\" value={this.props.account_id} onChange={this.handleChange}>\r\n                     {this.options}\r\n                </select>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TwitterAccountForm;","import React from 'react';\r\nimport '../../css/tweets/TweetTextForm.css';\r\n\r\nclass TweetTextForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n\r\n    handleChange(event) {\r\n        this.props.handleChange(event);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <textarea name=\"tweetText\" style={{ height: '80px' }} className=\"TweetTextEdit\" value={this.props.tweet_text} onChange={this.handleChange}></textarea>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TweetTextForm;","import React from 'react';\r\nimport '../../css/tweets/TweetEditMenu.css';\r\n\r\nclass TweetEditMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.cancel = this.cancel.bind(this);        \r\n    }\r\n\r\n    cancel() {\r\n        this.props.onChangeTweetState('Display');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"TweetBtnContainer\">\r\n                <div className=\"TweetBtn\" onClick={this.cancel} >CANCEL</div>\r\n                <button type=\"submit\" className=\"TweetBtn\">CONFIRM</button>\r\n            </div>\r\n        );       \r\n    }\r\n}\r\n\r\nexport default TweetEditMenu;","import React from 'react';\r\nimport '../../css/tweets/TweetEdit.css';\r\nimport TweetTitleForm from './tweetTitleform';\r\nimport TwitterAccountForm from './twitterAccountForm';\r\nimport TweetTextForm from './tweetTextForm.js';\r\nimport TweetEditMenu from './tweetEditMenu.js';\r\n\r\n\r\nclass TweetForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let defaultTweetValues = { tweet_title: '', tweet_text: '', account_id: props.formOptions.twitterAccounts[0].account_id};\r\n        let defaultFormOptions = {\r\n            tweet: {},\r\n            addedSubmitData: {},\r\n            submitRequestUrl: '/',\r\n            handlePostSubmit: () => { },\r\n            onCancel: () => { }\r\n        };\r\n\r\n        this.state = {\r\n            formData: Object.assign(defaultTweetValues, props.formOptions.tweet),\r\n            formOptions: Object.assign(defaultFormOptions, props.formOptions)\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n\r\n    handleChange(event) {      \r\n        this.formEdits = Object.assign({}, this.state.formData);\r\n\r\n        this.propertyEdit = event.target.type;\r\n\r\n        switch (this.propertyEdit) {\r\n\r\n            case 'text':\r\n                this.formEdits.tweet_title = event.target.value;\r\n                break;\r\n\r\n            case 'select-one':\r\n                this.formEdits.account_id = event.target.value;\r\n                break;\r\n\r\n            case 'textarea':\r\n                this.formEdits.tweet_text = event.target.value;\r\n                break;\r\n\r\n            default:\r\n                console.log(\"Attempted to change a property that is not a tweet edit form field\");\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            formData: Object.assign({}, this.formEdits)\r\n        });\r\n    }\r\n\r\n\r\n    async handleSubmit(event) { //We have to use a custom submit handler because the post_id wouldn't be included in the form data. \r\n                                //We also collect the edited tweet in the database in the http response and refresh the tweets in our REACT state to reflect the new state of the database\r\n        event.preventDefault();\r\n        \r\n        let newTweetData = new FormData();\r\n\r\n        newTweetData.append(\"account_id\", this.state.formData.account_id);\r\n        newTweetData.append(\"tweet_title\", this.state.formData.tweet_title);\r\n        newTweetData.append(\"tweet_text\", this.state.formData.tweet_text);\r\n\r\n        for (const [key, value] of Object.entries(this.state.formOptions.addedSubmitData)) {\r\n            newTweetData.append(key, value);\r\n        }       \r\n\r\n        let requestUrl = this.state.formOptions.submitRequestUrl;\r\n\r\n        let request = new Request(requestUrl,\r\n            {\r\n                method: 'POST',\r\n                credentials: 'include',\r\n                body: newTweetData\r\n            });\r\n\r\n        let res = await fetch(request);\r\n\r\n        this.state.formOptions.handlePostSubmit(res);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className=\"Tweet\">\r\n                <div className=\"TweetHeader\">\r\n                    <div className=\"Toggle\" />\r\n                    <TweetTitleForm tweet_title={this.state.formData.tweet_title} handleChange={this.handleChange} />\r\n                </div>\r\n\r\n                <div className=\"TweetContent\">\r\n                    <TwitterAccountForm account_id={this.state.formData.account_id} twitterAccounts={this.state.formOptions.twitterAccounts} handleChange={this.handleChange} />\r\n                    <TweetTextForm tweet_text={this.state.formData.tweet_text} handleChange={this.handleChange} />\r\n                    <TweetEditMenu onChangeTweetState={this.state.formOptions.onCancel} />\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TweetForm;","import React from 'react';\r\nimport '../../css/tweets/NewTweet.css';\r\nimport TweetForm from './tweetForm.js';\r\n\r\nclass NewTweet extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.setButtonState = this.setButtonState.bind(this);\r\n        this.setCreateTweetState = this.setCreateTweetState.bind(this);\r\n        this.postCreateTweetFormSubmit = this.postCreateTweetFormSubmit.bind(this);\r\n\r\n        this.state = {\r\n            componentState: 'Button',\r\n            formOptions: {\r\n                tweet: {},\r\n                twitterAccounts: props.twitterAccounts,\r\n                addedSubmitData: { username: props.username },\r\n                submitRequestUrl: 'https://streamtoggle-backend.herokuapp.com/tweet/createTweet/',\r\n                handlePostSubmit: this.postCreateTweetFormSubmit,\r\n                onCancel: this.setButtonState\r\n            }\r\n        };      \r\n    }\r\n\r\n    postCreateTweetFormSubmit(res) {\r\n        this.setButtonState();\r\n        this.props.updateTweets();\r\n    }\r\n\r\n    setButtonState() {\r\n        this.setState({ componentState: 'Button' });\r\n    }\r\n\r\n    setCreateTweetState() {\r\n        this.setState({ componentState: 'CreateTweet' });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.componentState === \"Button\" ?\r\n                    <div className=\"NewTweetBtn\" onClick={this.setCreateTweetState}>New Tweet</div> :\r\n                    this.state.componentState === \"CreateTweet\" ?\r\n                    <TweetForm formOptions={this.state.formOptions} /> : ''\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewTweet;","import React from 'react';\r\nimport '../css/FreshAccount.css';\r\nimport NewTweet from './tweets/newTweet.js';\r\n\r\n\r\nfunction FirstTweet(props) {\r\n    return (\r\n        <div className=\"PromptContainer\">\r\n            <h3>Create a tweet</h3>\r\n            <NewTweet username={props.username} updateTweets={props.updateTweets} twitterAccounts={props.twitterAccounts} />                \r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default FirstTweet;","import React from 'react';\r\nimport '../../css/submenu/SettingsMenu.css';\r\n\r\n\r\nfunction SettingsMenu(props) {\r\n    return (\r\n        <div className=\"SettingsMenu\">\r\n            <p style={{ fontWeight: \"bold\" }}>USER</p>\r\n            <p>{props.username}</p>\r\n            <div className=\"BtnContainer\">\r\n                <a href=\"https://eschmiel.github.io/smt\"><div className=\"SubmenuBtn\">About</div></a>\r\n                <div className=\"SubmenuBtn\" id=\"Unlink Account\" onClick={props.changeSubmenuState}>Unlink Account</div>\r\n                <div className=\"SubmenuBtn\" id=\"Delete User\" onClick={props.changeSubmenuState}>Delete User</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default SettingsMenu;","import React from 'react';\r\nimport '../css/Account.css';\r\n\r\n\r\nclass Account extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleSelect = this.handleSelect.bind(this);\r\n    }\r\n\r\n\r\n    handleSelect() {\r\n        if(this.props.onSelect) this.props.onSelect(this.props.account_id);\r\n    }\r\n\r\n\r\n    render() {\r\n        let accountStatus;\r\n\r\n        if (this.props.selected) accountStatus = \"AccountSelected\";\r\n        else accountStatus = \"Account\";    \r\n\r\n        return <div className={accountStatus} onClick={this.handleSelect}>{this.props.name}</div>        \r\n    }\r\n}\r\n\r\n\r\nexport default Account;","import React from 'react';\r\nimport Account from './account';\r\n\r\n\r\nfunction AccountList(props) {\r\n    const accountList = props.accounts.map((accountData) => \r\n        <Account key={accountData.account_id} account_id={accountData.account_id} name={accountData.screen_name} selected={accountData.selected} onSelect={props.onSelect} />\r\n    );\r\n\r\n\r\n    return (\r\n        <div className=\"AccountContainer\">\r\n            {accountList}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AccountList;","import React from 'react';\r\nimport '../../css/submenu/LinkedAccountsMenu.css';\r\nimport AccountList from '../accountList.js';\r\n\r\nclass LinkedAccountsMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { authorizationLink: '' };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://streamtoggle-backend.herokuapp.com/account/linkTwitterAccount', {method: 'GET', credentials: 'include'}).then(response => response.text()).then(link => this.setState({ authorizationLink: link }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"LinkedAccountsMenu\">\r\n                <div className=\"AccountContainer\">\r\n                    <AccountList accounts={this.props.linkedAccounts} />\r\n                </div>\r\n                <a href={this.state.authorizationLink}>\r\n                    <div className=\"SubmenuBtn\">Link Account</div>   \r\n                </a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LinkedAccountsMenu;","import React from 'react';\r\nimport '../../../css/submenu/UnlinkAccountConfirmMenu.css';\r\nimport AccountList from '../../accountList.js';\r\n\r\n//Required Props: selectedAccounts\r\n//                onCancel\r\n\r\nfunction UnlinkAccountConfirmMenu(props) {\r\n    return (\r\n        <div className=\"UnlinkAccountConfirmMenu\">\r\n            <h3>Are you sure you want to unlink this account?</h3>\r\n            <div className=\"AccountContainer\">\r\n                <AccountList accounts={props.selectedAccounts} />\r\n            </div>\r\n            <div className=\"BtnContainer\">\r\n                <div className=\"SubmenuBtn\" id='Settings' onClick={props.onConfirm}>Confirm</div>\r\n                <div className=\"SubmenuBtn\" id=\"Select\" onClick={props.onCancel}>Cancel</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UnlinkAccountConfirmMenu;","import React from 'react';\r\nimport AccountList from '../../accountList.js';\r\n\r\n//Required props: onSelect\r\n//                onCancel\r\n//                onConfirm\r\n//                unlinkAccountMenuItems\r\n\r\nfunction UnlinkAccountSelectMenu(props) {\r\n    return (\r\n        <div className=\"UnlinkAccountsMenu\">\r\n            <AccountList accounts={props.unlinkAccountMenuItems} onSelect={props.onSelect} />\r\n            <div className=\"BtnContainer\">\r\n                <div className=\"SubmenuBtn\" id=\"Confirm\" onClick={props.onConfirm}>Unlink Account</div>\r\n                <div className=\"SubmenuBtn\" id=\"Settings\" onClick={props.onCancel}>Cancel</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UnlinkAccountSelectMenu;","import React from 'react';\r\nimport '../../../css/submenu/UnlinkAccountsMenu.css';\r\nimport UnlinkAccountConfirmMenu from './unlinkAccountConfirmMenu.js';\r\nimport UnlinkAccountSelectMenu from './unlinkAccountSelectMenu.js';\r\n\r\nclass UnlinkAccountsMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let unlinkAccountMenuItemsHelper = props.linkedAccounts.map((twitterAccount) => { return { account_id: twitterAccount.account_id, screen_name: twitterAccount.screen_name, selected: false } })\r\n\r\n        this.state = {\r\n            menuState: 'Select',\r\n            unlinkAccountMenuItems: unlinkAccountMenuItemsHelper\r\n        };\r\n\r\n        this.changeMenuState = this.changeMenuState.bind(this);\r\n        this.handleSelectMenuConfirm = this.handleSelectMenuConfirm.bind(this);\r\n        this.select = this.select.bind(this);\r\n        this.getSelectedAccounts = this.getSelectedAccounts.bind(this);\r\n        this.unlinkAccount = this.unlinkAccount.bind(this);\r\n    }\r\n\r\n\r\n    changeMenuState(event) {\r\n        this.setState({ menuState: event.target.id });\r\n    }\r\n\r\n\r\n    handleSelectMenuConfirm(event) {\r\n        if (this.getSelectedAccounts().length) this.changeMenuState(event);\r\n    }\r\n\r\n\r\n    select(account_id) {\r\n        let indexOfSelected = this.state.unlinkAccountMenuItems.findIndex((account) => account.account_id === account_id);\r\n\r\n        let unlinkAccountMenuItemsEdits = this.state.unlinkAccountMenuItems.map((account, index) => {\r\n            if (index === indexOfSelected) { account.selected = !account.selected; }\r\n            return account;\r\n        });\r\n\r\n        this.setState({ unlinkAccountMenuItems: unlinkAccountMenuItemsEdits });\r\n    }\r\n\r\n\r\n    getSelectedAccounts() {\r\n        let selectedAccounts = this.state.unlinkAccountMenuItems.filter((account) => account.selected);\r\n\r\n        return selectedAccounts;\r\n    }\r\n\r\n\r\n    async unlinkAccount() {\r\n        const requestUrl = 'https://streamtoggle-backend.herokuapp.com/account/unlinkTwitterAccount';\r\n        let requestData = new FormData();\r\n        let selectedAccounts = this.getSelectedAccounts();\r\n\r\n        selectedAccounts.forEach(account => requestData.append('account_id[]', account.account_id));\r\n\r\n        let unlinkRequest = new Request(requestUrl,\r\n            {\r\n                method: 'POST',\r\n                credentials: 'include',\r\n                body: requestData\r\n            });\r\n\r\n        await fetch(unlinkRequest);\r\n\r\n        this.props.refreshLinkedAccounts();\r\n        this.props.refreshTweets();       \r\n        this.props.changeSubmenuState();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.menuState === 'Select' ? <UnlinkAccountSelectMenu unlinkAccountMenuItems={this.state.unlinkAccountMenuItems}\r\n                    onSelect={this.select} onConfirm={this.handleSelectMenuConfirm} onCancel={this.props.changeSubmenuState} />\r\n                    : this.state.menuState === 'Confirm' ? <UnlinkAccountConfirmMenu selectedAccounts={this.getSelectedAccounts()} onCancel={this.changeMenuState} onConfirm={this.unlinkAccount}/> \r\n                :''}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default UnlinkAccountsMenu;","import React from 'react';\r\nimport '../../css/submenu/DeleteAccountConfirmMenu.css';\r\nimport Account from '../account.js';\r\n\r\nclass DeleteAccountConfirmMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n    }\r\n\r\n    \r\n    async handleDelete() {\r\n        await fetch('https://streamtoggle-backend.herokuapp.com/account/deleteUserAccount', { method: 'POST', credentials: 'include' });\r\n\r\n        this.props.onLogout();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"DeleteAccountConfirmMenu\">\r\n                <h3>Are you sure you want to delete this account?</h3>\r\n                <div className=\"AccountContainer\">\r\n                    <Account name={this.props.username} selected={true}/>\r\n                </div>\r\n                <div className=\"BtnContainer\">\r\n                    <div className=\"SubmenuBtn\" onClick={this.handleDelete}>Confirm</div>\r\n                    <div className=\"SubmenuBtn\" id=\"Cancel\" onClick={this.props.changeSubmenuState}>Cancel</div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DeleteAccountConfirmMenu;","import React from 'react';\r\nimport '../../css/submenu/Submenu.css';\r\nimport SettingsMenu from './settingsMenu.js'\r\nimport LinkedAccountsMenu from './linkedAccountsMenu.js'\r\nimport UnlinkAccountMenu from './unlinkAccountMenu/unlinkAccountMenu';\r\nimport DeleteAccountConfirmMenu from './deleteAccountConfirmMenu.js';\r\n\r\n\r\nclass Submenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {};\r\n\r\n        this.manageSubmenuState = this.manageSubmenuState.bind(this);\r\n    }\r\n\r\n\r\n    manageSubmenuState() {\r\n        switch (this.props.currentState) {\r\n            case 'Settings': return <SettingsMenu changeSubmenuState={this.props.changeSubmenuState} username={this.props.username}/>\r\n            case \"Linked Accounts\": return <LinkedAccountsMenu changeSubmenuState={this.props.changeSubmenuState} linkedAccounts={this.props.twitter_accounts} /> \r\n            case \"Unlink Account\": return <UnlinkAccountMenu changeSubmenuState={this.props.changeSubmenuState}\r\n                                                             linkedAccounts={this.props.twitter_accounts}\r\n                                                             refreshLinkedAccounts={this.props.refreshLinkedAccounts}\r\n                                                             refreshTweets={this.props.refreshTweets} />\r\n            case \"Delete User\": return <DeleteAccountConfirmMenu changeSubmenuState={this.props.changeSubmenuState} username={this.props.username} onLogout={this.props.onLogout} />\r\n            default: console.log('Submenu state changed to a not recognized state'); break;\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (           \r\n            <div className=\"Submenu\">\r\n                {this.manageSubmenuState()}                \r\n            </div>         \r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Submenu;","import React from 'react';\r\nimport Submenu from './submenu/submenu.js';\r\n\r\nclass Menu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            submenuState: ''\r\n        }\r\n\r\n        this.changeSubmenuState = this.changeSubmenuState.bind(this);\r\n        this.logout = this.logout.bind(this);\r\n    }\r\n\r\n\r\n    changeSubmenuState(event) {\r\n        let newState; \r\n        if (event) newState = event.target.id; else newState = '';\r\n\r\n        this.setState({ submenuState: newState });\r\n    }\r\n\r\n\r\n    logout() {\r\n        fetch('https://streamtoggle-backend.herokuapp.com/logout', { method: 'POST', credentials: 'include' });\r\n\r\n        let expirationDate = new Date();\r\n\r\n        this.props.onLogout('');\r\n\r\n        document.cookie = \"username=; domain=http://www.studioschmiel.com; expires=\" + expirationDate.toUTCString(); \r\n        document.cookie = \"connect.sid=; domain=http://www.studioschmiel.com; expires=\" + expirationDate.toUTCString(); \r\n    }\r\n\r\n\r\n    render() {        \r\n        return (\r\n            <div className=\"Menu\">\r\n                <div className=\"MenuBtn\" onClick={this.logout}>Logout</div>\r\n                <div className=\"MenuBtn\" id=\"Settings\" onClick={this.changeSubmenuState}>Settings</div>\r\n                <div className=\"MenuBtn\" id=\"Linked Accounts\" onClick={this.changeSubmenuState}>Linked Accounts</div>\r\n                <Submenu currentState={this.state.submenuState}\r\n                         changeSubmenuState={this.changeSubmenuState}\r\n                         onLogout={this.logout}\r\n                         username={this.props.username}\r\n                         twitter_accounts={this.props.twitter_accounts}\r\n                         refreshLinkedAccounts={this.props.refreshLinkedAccounts}\r\n                         refreshTweets={this.props.refreshTweets} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","import React from 'react';\r\nimport '../../css/tweets/TweetTitle.css';\r\n\r\nfunction TweetTitle(props) {\r\n    return (\r\n        <div className=\"TweetTitle\">\r\n            <h2>{props.tweet_title}</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TweetTitle;","import React from 'react';\r\nimport '../../css/tweets/TwitterAccount.css';\r\n\r\nfunction TwitterAccount(props) {\r\n    return (\r\n        <div className=\"TwitterAccount\">\r\n            <h3>Twitter:</h3>\r\n            <p>{props.twitter_account}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TwitterAccount;","import React from 'react';\r\nimport '../../css/tweets/TweetText.css';\r\n\r\nfunction TweetText(props) {\r\n    return (\r\n        <div className=\"TweetTextBox\">\r\n            <p className=\"TweetTextContent\">{props.tweet_text}</p>\r\n        </div>\r\n    );    \r\n}\r\n\r\nexport default TweetText;","import React from 'react';\r\nimport '../../css/tweets/TweetDisplayMenu.css';\r\n\r\nclass TweetDisplayMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.setEditState = this.setEditState.bind(this);\r\n        this.setDeleteState = this.setDeleteState.bind(this);\r\n    } \r\n\r\n    setEditState() {\r\n        this.props.onChangeTweetState('Edit');\r\n    }\r\n\r\n    setDeleteState() {\r\n        this.props.onChangeTweetState('Delete');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"TweetBtnContainer\">\r\n                <div className=\"TweetBtn\" onClick={this.setDeleteState}>DELETE</div>\r\n                <div className=\"TweetBtn\" onClick={this.setEditState}>EDIT</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TweetDisplayMenu;","import React from 'react';\r\nimport '../../css/tweets/Tweet.css';\r\nimport TweetTitle from './tweetTitle.js';\r\nimport TwitterAccount from './twitterAccount.js';\r\nimport TweetText from './tweetText.js';\r\nimport TweetDisplayMenu from './tweetDisplayMenu.js';\r\n\r\nclass TweetDisplay extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toggleTweet = this.toggleTweet.bind(this);\r\n    }\r\n\r\n    async toggleTweet() {\r\n        let updatedTweet = await fetch('https://streamtoggle-backend.herokuapp.com/tweet/toggleTweet/' + this.props.tweet.post_id, { method: 'POST', credentials: 'include' });\r\n        let processedUpdatedTweet = await updatedTweet.json();\r\n        this.props.refreshTweet(processedUpdatedTweet);\r\n    }\r\n\r\n    render() {\r\n        let screen_name = this.props.twitterAccounts.find(account => account.account_id === this.props.tweet.account_id).screen_name;\r\n\r\n        return (\r\n            <div className=\"Tweet\">\r\n                <div className=\"TweetHeader\">\r\n                    {this.props.tweet.active_status === \"inactive\" ? <div className=\"Toggle\" onClick={this.toggleTweet}><p>Toggle</p></div> :\r\n                     this.props.tweet.active_status === \"active\" ? <div className=\"ToggleActive\" onClick={this.toggleTweet}><p>Toggle</p></div> : ''}\r\n                    <TweetTitle tweet_title={this.props.tweet.tweet_title} />\r\n                </div>\r\n\r\n                <div className=\"TweetContent\">\r\n                    <TwitterAccount twitter_account={screen_name} />\r\n                    <TweetText tweet_text={this.props.tweet.tweet_text} />\r\n                    <TweetDisplayMenu onChangeTweetState={this.props.onChangeTweetState} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TweetDisplay;","import React from 'react';\r\nimport '../../css/tweets/TweetEdit.css';\r\nimport TweetForm from './tweetForm.js';\r\n\r\n\r\nclass TweetEdit extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleReturnedEditedTweet = this.handleReturnedEditedTweet.bind(this);\r\n        this.cancel = this.cancel.bind(this);\r\n\r\n        this.state = {\r\n            formOptions: {\r\n                tweet: Object.assign({}, props.tweet),                \r\n                twitterAccounts: props.twitterAccounts,                \r\n                submitRequestUrl: 'https://streamtoggle-backend.herokuapp.com/tweet/editTweet/' + props.tweet.post_id,\r\n                handlePostSubmit: this.handleReturnedEditedTweet,\r\n                onCancel: this.cancel\r\n            }\r\n        };            \r\n    }\r\n\r\n\r\n    handleReturnedEditedTweet(response) {\r\n        response.json().then((data) => { console.log(data); this.props.refreshTweet(data) });\r\n        this.cancel();\r\n    }\r\n\r\n\r\n    cancel() {\r\n        this.props.onChangeTweetState(\"Display\");\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <TweetForm formOptions={this.state.formOptions} />\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default TweetEdit;","import React from 'react';\r\nimport '../../css/tweets/TweetDeleteMenu.css';\r\nimport TweetTitle from \"./tweetTitle.js\"; \r\n\r\nclass TweetDeleteMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.cancel = this.cancel.bind(this);\r\n        this.requestTweetDelete = this.requestTweetDelete.bind(this);\r\n    }\r\n\r\n    cancel() {\r\n        this.props.onChangeTweetState('Display');\r\n    }\r\n\r\n    requestTweetDelete() {\r\n        fetch('https://streamtoggle-backend.herokuapp.com/tweet/deleteTweet/' + this.props.tweet.post_id, { method: 'POST', credentials: 'include' }).then((response) => this.props.updateTweets() );\r\n    }\r\n\r\n    render() {\r\n        return ( \r\n            <div className=\"Tweet\">\r\n                <div className=\"TweetHeader\">\r\n                    <div className=\"Toggle\">\r\n                    </div>\r\n                    <TweetTitle tweet_title={this.props.tweet.tweet_title} />\r\n                </div>\r\n                <div className=\"TweetContent\">\r\n                    <div className=\"TweetDeleteMenu\">\r\n                        <h2>\r\n                            Are you sure you want to delete this tweet?\r\n                        </h2>\r\n                        <div className=\"TweetDeleteBtnContainer\">\r\n                            <div className=\"TweetDeleteBtn\" onClick={this.requestTweetDelete} > CONFIRM</div>\r\n                            <div className=\"TweetDeleteBtn\" onClick={this.cancel} >CANCEL</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TweetDeleteMenu;","import React from 'react';\r\nimport '../../css/tweets/Tweet.css';\r\nimport TweetDisplay from './tweetDisplay.js';\r\nimport TweetEdit from './tweetEdit.js';\r\nimport TweetDelete from './tweetDeleteMenu.js';\r\n\r\nclass Tweet extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.setTweetState = this.setTweetState.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n        this.state = {\r\n            tweetState: 'Display'\r\n        };\r\n    }\r\n\r\n    setTweetState(newTweetState) {\r\n        this.setState({ tweetState: newTweetState });\r\n    } \r\n\r\n    async handleSubmit(event) { //We have to use a custom submit handler because the post_id wouldn't be included in the form data. \r\n        //We also collect the edited tweet in the database in the http response and refresh the tweets in our REACT state to reflect the new state of the database\r\n        event.preventDefault();\r\n\r\n        let edits = new FormData();\r\n\r\n        edits.append(\"account_id\", this.state.tweetEdits.account_id);\r\n        edits.append(\"tweet_title\", this.state.tweetEdits.tweet_title);\r\n        edits.append(\"tweet_text\", this.state.tweetEdits.tweet_text);\r\n\r\n        let requestUrl = \"https://streamtoggle-backend.herokuapp.com/tweet/editTweet/\" + this.state.tweetEdits.post_id;\r\n\r\n        let request = new Request(requestUrl,\r\n            {\r\n                method: 'POST',\r\n                credentials: 'include',\r\n                body: edits\r\n            });\r\n\r\n        let res = await fetch(request);\r\n        let currentTweet = await res.json();\r\n        this.props.refreshTweet(currentTweet);\r\n        this.props.onChangeTweetState('Display');\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                {this.state.tweetState === 'Display' ? <TweetDisplay tweet={this.props.tweet}\r\n                    onChangeTweetState={this.setTweetState}\r\n                    twitterAccounts={this.props.twitterAccounts}\r\n                    refreshTweet={this.props.refreshTweet} /> :\r\n\r\n                 this.state.tweetState === 'Edit' ? <TweetEdit tweet={this.props.tweet}\r\n                    twitterAccounts={this.props.twitterAccounts}\r\n                    onChangeTweetState={this.setTweetState}\r\n                    refreshTweet={this.props.refreshTweet}\r\n                    handleSubmit={this.handleSubmit} /> :\r\n\r\n                 this.state.tweetState === 'Delete' ? <TweetDelete tweet = {this.props.tweet} onChangeTweetState={this.setTweetState} updateTweets={this.props.updateTweets}/> : '' }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tweet;","import React from 'react';\r\nimport LinkFirstAccount from './linkFirstAccount.js';\r\nimport FirstTweet from './firstTweet.js';\r\nimport Menu from './menu.js';\r\nimport Tweet from './tweets/tweet.js';\r\nimport NewTweet from './tweets/newTweet.js';\r\nconst clone = require('rfdc')();\r\n\r\n\r\nclass LoggedIn extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            tweets: [],\r\n            twitterAccounts: [],\r\n        };\r\n\r\n        this.getLinkedAccounts = this.getLinkedAccounts.bind(this);\r\n        this.getTweets = this.getTweets.bind(this);\r\n        this.refreshTweet = this.refreshTweet.bind(this);\r\n        this.buildTweetComponents = this.buildTweetComponents.bind(this);        \r\n    }\r\n\r\n \r\n    componentDidMount() {       \r\n        this.getTweets();\r\n        this.getLinkedAccounts();   \r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"Menubar\">\r\n                    <img src=\"./images/smt-logo.png\" alt=\"Social Media Toggle by Schmiel logo\" className=\"logo\" />\r\n                    <Menu onLogout={this.props.onLogout} twitter_accounts={this.state.twitterAccounts} refreshLinkedAccounts={this.getLinkedAccounts} refreshTweets={this.getTweets} username={this.props.username}/>\r\n                </div>                \r\n                {\r\n                    this.state.twitterAccounts.length === 0 ? <LinkFirstAccount /> :\r\n                    this.state.tweets.length === 0 ? <FirstTweet username={this.props.username} updateTweets={this.getTweets} twitterAccounts={this.state.twitterAccounts} /> :\r\n                    <div id=\"TweetsContainer\"> \r\n                        {this.buildTweetComponents(this.state.tweets)}\r\n                        <NewTweet username={this.props.username} updateTweets={this.getTweets} twitterAccounts={this.state.twitterAccounts} /> \r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    buildTweetComponents(tweetObjs) {\r\n        let tweetComponents = tweetObjs.map((tweet, index) => <Tweet tweet={tweet} twitterAccounts={this.state.twitterAccounts} refreshTweet={this.refreshTweet} updateTweets={this.getTweets} />)\r\n\r\n        return (tweetComponents);\r\n    }\r\n\r\n\r\n    refreshTweet(currentTweet) {\r\n        let index = this.state.tweets.findIndex(element => element.post_id === currentTweet.post_id);\r\n\r\n        if (index !== -1) {\r\n            let editsContainer = clone(this.state.tweets);\r\n\r\n            editsContainer[index] = clone(currentTweet);\r\n\r\n            this.setState({ tweets: editsContainer });\r\n        }\r\n    }\r\n\r\n\r\n    getTweets() {\r\n        fetch('https://streamtoggle-backend.herokuapp.com/tweet/getUserTweets', { method: 'GET', credentials: 'include' })\r\n            .then(response => response.json())\r\n            .then(data => this.setState({ tweets: data }));\r\n    }\r\n\r\n\r\n    getLinkedAccounts() {\r\n        fetch('https://streamtoggle-backend.herokuapp.com/account/getLinkedAccounts', { method: 'GET', credentials: 'include' })\r\n            .then(response => response.json())\r\n            .then(data => this.setState({ twitterAccounts: data }));\r\n    }\r\n}\r\n\r\nexport default LoggedIn;","import React from 'react';\r\nimport '../css/securityWarning.css';\r\n\r\nfunction SecurityWarning(props) {\r\n    return (\r\n        <div className=\"SecurityWarning\">\r\n            <h3>WARNING</h3>\r\n            <p> Security best practices have not been implemented and the Social Media Toggle is not considered a secure system.\r\n                We do not recommend currently putting any sensitive information into the system such as creating an account with a commonly used password\r\n                or linking your Twitter account to the Social Media Toggle\r\n            </p>\r\n\r\n            <h4>This build is for demonstration purposes only</h4>\r\n            <p>A test account can be accessed with the following credentials:</p>\r\n            <p>Username: test</p>\r\n            <p>Password: test</p>\r\n            <p>The test user has access to a test Twitter account that can be found at: <a href='https://twitter.com/AccountSmt'>https://twitter.com/AccountSmt</a> </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SecurityWarning;","import React from 'react';\r\nimport NotLoggedIn from './components/notLoggedIn.js';\r\nimport LoggedIn from './components/loggedIn';\r\nimport './css/MainCSS.css';\r\nimport SecurityWarning from './components/securityWarning.js';\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.setUsername = this.setUsername.bind(this);\r\n\r\n        this.state = {\r\n            username: document.cookie.split('=')[1]        \r\n        };\r\n    }\r\n\r\n    setUsername(newUsername) {\r\n        this.setState({ username: newUsername });\r\n\r\n        document.cookie = \"username=\" + newUsername;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.username ? <LoggedIn username={this.state.username} onLogout={this.setUsername} /> : <NotLoggedIn onLogin={this.setUsername} />}\r\n                <SecurityWarning />\r\n            </div>    \r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}