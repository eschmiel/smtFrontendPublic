{"ast":null,"code":"import _regeneratorRuntime from\"C:/repos/streamToggle/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/repos/streamToggle/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:/repos/streamToggle/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/repos/streamToggle/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:/repos/streamToggle/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:/repos/streamToggle/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/repos/streamToggle/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import'../../css/tweets/Tweet.css';import TweetDisplay from'./tweetDisplay.js';import TweetEdit from'./tweetEdit.js';import TweetDelete from'./tweetDeleteMenu.js';var Tweet=/*#__PURE__*/function(_React$Component){_inherits(Tweet,_React$Component);var _super=_createSuper(Tweet);function Tweet(props){var _this;_classCallCheck(this,Tweet);_this=_super.call(this,props);_this.setTweetState=_this.setTweetState.bind(_assertThisInitialized(_this));_this.handleSubmit=_this.handleSubmit.bind(_assertThisInitialized(_this));_this.state={tweetState:'Display'};return _this;}_createClass(Tweet,[{key:\"setTweetState\",value:function setTweetState(newTweetState){this.setState({tweetState:newTweetState});}},{key:\"handleSubmit\",value:function(){var _handleSubmit=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(event){var edits,requestUrl,request,res,currentTweet;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0://We have to use a custom submit handler because the post_id wouldn't be included in the form data. \n//We also collect the edited tweet in the database in the http response and refresh the tweets in our REACT state to reflect the new state of the database\nevent.preventDefault();edits=new FormData();edits.append(\"account_id\",this.state.tweetEdits.account_id);edits.append(\"tweet_title\",this.state.tweetEdits.tweet_title);edits.append(\"tweet_text\",this.state.tweetEdits.tweet_text);requestUrl=\"/tweet/editTweet/\"+this.state.tweetEdits.post_id;request=new Request(requestUrl,{method:'POST',body:edits});_context.next=9;return fetch(request);case 9:res=_context.sent;_context.next=12;return res.json();case 12:currentTweet=_context.sent;this.props.refreshTweet(currentTweet);this.props.onChangeTweetState('Display');case 15:case\"end\":return _context.stop();}}},_callee,this);}));function handleSubmit(_x){return _handleSubmit.apply(this,arguments);}return handleSubmit;}()},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",null,this.state.tweetState==='Display'?/*#__PURE__*/React.createElement(TweetDisplay,{tweet:this.props.tweet,onChangeTweetState:this.setTweetState,twitterAccounts:this.props.twitterAccounts,refreshTweet:this.props.refreshTweet}):this.state.tweetState==='Edit'?/*#__PURE__*/React.createElement(TweetEdit,{tweet:this.props.tweet,twitterAccounts:this.props.twitterAccounts,onChangeTweetState:this.setTweetState,refreshTweet:this.props.refreshTweet,handleSubmit:this.handleSubmit}):this.state.tweetState==='Delete'?/*#__PURE__*/React.createElement(TweetDelete,{tweet:this.props.tweet,onChangeTweetState:this.setTweetState,updateTweets:this.props.updateTweets}):'');}}]);return Tweet;}(React.Component);export default Tweet;","map":{"version":3,"sources":["C:/repos/streamToggle/frontend/src/components/tweets/tweet.js"],"names":["React","TweetDisplay","TweetEdit","TweetDelete","Tweet","props","setTweetState","bind","handleSubmit","state","tweetState","newTweetState","setState","event","preventDefault","edits","FormData","append","tweetEdits","account_id","tweet_title","tweet_text","requestUrl","post_id","request","Request","method","body","fetch","res","json","currentTweet","refreshTweet","onChangeTweetState","tweet","twitterAccounts","updateTweets","Component"],"mappings":"ghCAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAO,4BAAP,CACA,MAAOC,CAAAA,YAAP,KAAyB,mBAAzB,CACA,MAAOC,CAAAA,SAAP,KAAsB,gBAAtB,CACA,MAAOC,CAAAA,WAAP,KAAwB,sBAAxB,C,GAEMC,CAAAA,K,0GACF,eAAYC,KAAZ,CAAmB,uCACf,uBAAMA,KAAN,EAEA,MAAKC,aAAL,CAAqB,MAAKA,aAAL,CAAmBC,IAAnB,+BAArB,CACA,MAAKC,YAAL,CAAoB,MAAKA,YAAL,CAAkBD,IAAlB,+BAApB,CAEA,MAAKE,KAAL,CAAa,CACTC,UAAU,CAAE,SADH,CAAb,CANe,aASlB,C,sEAEaC,a,CAAe,CACzB,KAAKC,QAAL,CAAc,CAAEF,UAAU,CAAEC,aAAd,CAAd,EACH,C,kIAEkBE,K,gKAAS;AACxB;AACAA,KAAK,CAACC,cAAN,GAEIC,K,CAAQ,GAAIC,CAAAA,QAAJ,E,CAEZD,KAAK,CAACE,MAAN,CAAa,YAAb,CAA2B,KAAKR,KAAL,CAAWS,UAAX,CAAsBC,UAAjD,EACAJ,KAAK,CAACE,MAAN,CAAa,aAAb,CAA4B,KAAKR,KAAL,CAAWS,UAAX,CAAsBE,WAAlD,EACAL,KAAK,CAACE,MAAN,CAAa,YAAb,CAA2B,KAAKR,KAAL,CAAWS,UAAX,CAAsBG,UAAjD,EAEIC,U,CAAa,oBAAsB,KAAKb,KAAL,CAAWS,UAAX,CAAsBK,O,CAEzDC,O,CAAU,GAAIC,CAAAA,OAAJ,CAAYH,UAAZ,CACV,CACII,MAAM,CAAE,MADZ,CAEIC,IAAI,CAAEZ,KAFV,CADU,C,uBAMEa,CAAAA,KAAK,CAACJ,OAAD,C,QAAjBK,G,sCACqBA,CAAAA,GAAG,CAACC,IAAJ,E,SAArBC,Y,eACJ,KAAK1B,KAAL,CAAW2B,YAAX,CAAwBD,YAAxB,EACA,KAAK1B,KAAL,CAAW4B,kBAAX,CAA8B,SAA9B,E,mMAGK,CAEL,mBACI,+BACK,KAAKxB,KAAL,CAAWC,UAAX,GAA0B,SAA1B,cAAsC,oBAAC,YAAD,EAAc,KAAK,CAAE,KAAKL,KAAL,CAAW6B,KAAhC,CACnC,kBAAkB,CAAE,KAAK5B,aADU,CAEnC,eAAe,CAAE,KAAKD,KAAL,CAAW8B,eAFO,CAGnC,YAAY,CAAE,KAAK9B,KAAL,CAAW2B,YAHU,EAAtC,CAKA,KAAKvB,KAAL,CAAWC,UAAX,GAA0B,MAA1B,cAAmC,oBAAC,SAAD,EAAW,KAAK,CAAE,KAAKL,KAAL,CAAW6B,KAA7B,CAChC,eAAe,CAAE,KAAK7B,KAAL,CAAW8B,eADI,CAEhC,kBAAkB,CAAE,KAAK7B,aAFO,CAGhC,YAAY,CAAE,KAAKD,KAAL,CAAW2B,YAHO,CAIhC,YAAY,CAAE,KAAKxB,YAJa,EAAnC,CAMA,KAAKC,KAAL,CAAWC,UAAX,GAA0B,QAA1B,cAAqC,oBAAC,WAAD,EAAa,KAAK,CAAI,KAAKL,KAAL,CAAW6B,KAAjC,CAAwC,kBAAkB,CAAE,KAAK5B,aAAjE,CAAgF,YAAY,CAAE,KAAKD,KAAL,CAAW+B,YAAzG,EAArC,CAAgK,EAZrK,CADJ,CAgBH,C,mBA1DepC,KAAK,CAACqC,S,EA6D1B,cAAejC,CAAAA,KAAf","sourcesContent":["import React from 'react';\r\nimport '../../css/tweets/Tweet.css';\r\nimport TweetDisplay from './tweetDisplay.js';\r\nimport TweetEdit from './tweetEdit.js';\r\nimport TweetDelete from './tweetDeleteMenu.js';\r\n\r\nclass Tweet extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.setTweetState = this.setTweetState.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n        this.state = {\r\n            tweetState: 'Display'\r\n        };\r\n    }\r\n\r\n    setTweetState(newTweetState) {\r\n        this.setState({ tweetState: newTweetState });\r\n    } \r\n\r\n    async handleSubmit(event) { //We have to use a custom submit handler because the post_id wouldn't be included in the form data. \r\n        //We also collect the edited tweet in the database in the http response and refresh the tweets in our REACT state to reflect the new state of the database\r\n        event.preventDefault();\r\n\r\n        let edits = new FormData();\r\n\r\n        edits.append(\"account_id\", this.state.tweetEdits.account_id);\r\n        edits.append(\"tweet_title\", this.state.tweetEdits.tweet_title);\r\n        edits.append(\"tweet_text\", this.state.tweetEdits.tweet_text);\r\n\r\n        let requestUrl = \"/tweet/editTweet/\" + this.state.tweetEdits.post_id;\r\n\r\n        let request = new Request(requestUrl,\r\n            {\r\n                method: 'POST',\r\n                body: edits\r\n            });\r\n\r\n        let res = await fetch(request);\r\n        let currentTweet = await res.json();\r\n        this.props.refreshTweet(currentTweet);\r\n        this.props.onChangeTweetState('Display');\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                {this.state.tweetState === 'Display' ? <TweetDisplay tweet={this.props.tweet}\r\n                    onChangeTweetState={this.setTweetState}\r\n                    twitterAccounts={this.props.twitterAccounts}\r\n                    refreshTweet={this.props.refreshTweet} /> :\r\n\r\n                 this.state.tweetState === 'Edit' ? <TweetEdit tweet={this.props.tweet}\r\n                    twitterAccounts={this.props.twitterAccounts}\r\n                    onChangeTweetState={this.setTweetState}\r\n                    refreshTweet={this.props.refreshTweet}\r\n                    handleSubmit={this.handleSubmit} /> :\r\n\r\n                 this.state.tweetState === 'Delete' ? <TweetDelete tweet = {this.props.tweet} onChangeTweetState={this.setTweetState} updateTweets={this.props.updateTweets}/> : '' }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tweet;"]},"metadata":{},"sourceType":"module"}