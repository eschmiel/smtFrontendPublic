{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\streamToggle\\\\frontend\\\\src\\\\components\\\\loggedIn.js\";\nimport React from 'react';\nimport LinkFirstAccount from './linkFirstAccount.js';\nimport FirstTweet from './firstTweet.js';\nimport Menu from './menu.js';\nimport TweetSection from './tweets/tweetSection.js';\nimport Tweet from './tweets/tweet.js';\n\nconst clone = require('rfdc')();\n\nclass LoggedIn extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tweets: [],\n      twitterAccounts: []\n    };\n    this.refreshTweet = this.refreshTweet.bind(this);\n    this.buildTweetComponents = this.buildTweetComponents.bind(this);\n  }\n\n  buildTweetComponents(tweetObjs) {\n    let tweetComponents = tweetObjs.map((tweet, index) => /*#__PURE__*/React.createElement(Tweet, {\n      tweet: tweet,\n      twitterAccounts: this.state.twitterAccounts,\n      refreshTweet: this.refreshTweet,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 63\n      }\n    }));\n    return tweetComponents;\n  }\n\n  refreshTweet(currentTweet) {\n    let index = this.state.tweets.findIndex(element => element.post_id == currentTweet.post_id);\n\n    if (index != -1) {\n      let editsContainer = clone(this.state.tweets);\n      editsContainer[index] = clone(currentTweet);\n      this.setState({\n        tweets: editsContainer\n      });\n    }\n  }\n\n  getTweets() {\n    fetch('/getUserTweets').then(response => {\n      return response.json();\n    }).then(data => {\n      console.log(data);\n      this.setState({\n        tweets: data\n      });\n    });\n  }\n\n  componentDidMount() {\n    fetch('/getUserTweets').then(response => {\n      return response.json();\n    }).then(data => {\n      console.log(data);\n      this.setState({\n        tweets: data\n      });\n    });\n    fetch('/getLinkedAccounts').then(response => {\n      return response.json();\n    }).then(data => {\n      console.log(data);\n      this.setState({\n        twitterAccounts: data\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Menubar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"./images/smt-logo.png\",\n      className: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Menu, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }\n    })), this.state.twitterAccounts.length === 0 ? /*#__PURE__*/React.createElement(LinkFirstAccount, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 63\n      }\n    }) : this.state.tweets.length === 0 ? /*#__PURE__*/React.createElement(FirstTweet, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 54\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      id: \"TweetsContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }\n    }, \" \", this.buildTweetComponents(this.state.tweets), \" \"));\n  }\n\n}\n\nexport default LoggedIn;","map":{"version":3,"sources":["C:/repos/streamToggle/frontend/src/components/loggedIn.js"],"names":["React","LinkFirstAccount","FirstTweet","Menu","TweetSection","Tweet","clone","require","LoggedIn","Component","constructor","props","state","tweets","twitterAccounts","refreshTweet","bind","buildTweetComponents","tweetObjs","tweetComponents","map","tweet","index","currentTweet","findIndex","element","post_id","editsContainer","setState","getTweets","fetch","then","response","json","data","console","log","componentDidMount","render","length"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport LinkFirstAccount from './linkFirstAccount.js';\r\nimport FirstTweet from './firstTweet.js';\r\nimport Menu from './menu.js';\r\nimport TweetSection from './tweets/tweetSection.js';\r\nimport Tweet from './tweets/tweet.js';\r\n\r\nconst clone = require('rfdc')();\r\n\r\nclass LoggedIn extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            tweets: [],\r\n            twitterAccounts: [],\r\n        };\r\n\r\n        this.refreshTweet = this.refreshTweet.bind(this);\r\n        this.buildTweetComponents = this.buildTweetComponents.bind(this);\r\n\r\n    }\r\n\r\n \r\n    buildTweetComponents(tweetObjs) {\r\n\r\n        let tweetComponents = tweetObjs.map((tweet, index) => <Tweet tweet={tweet} twitterAccounts={this.state.twitterAccounts} refreshTweet={this.refreshTweet} />)\r\n\r\n        return(tweetComponents);\r\n    }\r\n\r\n\r\n    refreshTweet(currentTweet) {\r\n\r\n        let index = this.state.tweets.findIndex(element => element.post_id == currentTweet.post_id);\r\n\r\n        if (index != -1) {\r\n\r\n            let editsContainer = clone(this.state.tweets);\r\n\r\n            editsContainer[index] = clone(currentTweet);\r\n\r\n            this.setState({ tweets: editsContainer });\r\n\r\n        }\r\n    }\r\n\r\n    getTweets() {\r\n\r\n        fetch('/getUserTweets').then((response) => { return response.json(); }).then((data) => { console.log(data); this.setState({ tweets: data }); });\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n       \r\n        fetch('/getUserTweets').then((response) => { return response.json(); }).then((data) => { console.log(data); this.setState({ tweets: data }); });\r\n        fetch('/getLinkedAccounts').then((response) => { return response.json(); }).then((data) => { console.log(data); this.setState({ twitterAccounts: data }); });\r\n        \r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"Menubar\">\r\n                    <img src=\"./images/smt-logo.png\" className=\"logo\" />\r\n                    <Menu />\r\n                </div>                \r\n                {\r\n                    this.state.twitterAccounts.length === 0 ? <LinkFirstAccount /> :\r\n                    this.state.tweets.length === 0 ? <FirstTweet /> :\r\n                    <div id=\"TweetsContainer\"> {this.buildTweetComponents(this.state.tweets)} </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default LoggedIn;"]},"metadata":{},"sourceType":"module"}