{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\streamToggle\\\\frontend\\\\src\\\\components\\\\tweets\\\\tweetSection.js\";\nimport React from 'react';\nimport '../../css/tweets/TweetSection.css';\nimport Tweet from './tweet.js';\nimport TweetEdit from './tweetEdit.js';\n\nconst clone = require('rfdc')();\n\nclass TweetSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tweets: props.tweets.map((tweet, index) => /*#__PURE__*/React.createElement(Tweet, {\n        tweet: tweet,\n        twitterAccounts: this.props.twitterAccounts,\n        index: index,\n        refreshTweet: this.props.refreshTweet,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 56\n        }\n      }))\n    };\n  }\n\n  componentDidUpate(prevProps) {\n    if (this.props.tweets != prevProps.tweets) {\n      let updatedTweets = this.props.tweets.map((tweet, index) => /*#__PURE__*/React.createElement(Tweet, {\n        tweet: tweet,\n        twitterAccounts: this.props.twitterAccounts,\n        index: index,\n        refreshTweet: this.props.refreshTweet,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 73\n        }\n      }));\n      this.setState({\n        tweets: clone(updatedTweets)\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"TweetsContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, this.state.tweets, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }\n    }, this.props.tweets[0].tweet_text));\n  }\n\n}\n\nexport default TweetSection;","map":{"version":3,"sources":["C:/repos/streamToggle/frontend/src/components/tweets/tweetSection.js"],"names":["React","Tweet","TweetEdit","clone","require","TweetSection","Component","constructor","props","state","tweets","map","tweet","index","twitterAccounts","refreshTweet","componentDidUpate","prevProps","updatedTweets","setState","render","tweet_text"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,mCAAP;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;;AAEA,MAAMC,KAAK,GAAGC,OAAO,CAAC,MAAD,CAAP,EAAd;;AAEA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA2C;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAEF,KAAK,CAACE,MAAN,CAAaC,GAAb,CAAiB,CAACC,KAAD,EAAQC,KAAR,kBAAkB,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAED,KAAd;AAAqB,QAAA,eAAe,EAAE,KAAKJ,KAAL,CAAWM,eAAjD;AAAkE,QAAA,KAAK,EAAED,KAAzE;AAAgF,QAAA,YAAY,EAAE,KAAKL,KAAL,CAAWO,YAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAnC;AADC,KAAb;AAGH;;AAEDC,EAAAA,iBAAiB,CAACC,SAAD,EAAY;AAEzB,QAAI,KAAKT,KAAL,CAAWE,MAAX,IAAqBO,SAAS,CAACP,MAAnC,EAA2C;AAEvC,UAAIQ,aAAa,GAAG,KAAKV,KAAL,CAAWE,MAAX,CAAkBC,GAAlB,CAAsB,CAACC,KAAD,EAAQC,KAAR,kBAAkB,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAED,KAAd;AAAqB,QAAA,eAAe,EAAE,KAAKJ,KAAL,CAAWM,eAAjD;AAAkE,QAAA,KAAK,EAAED,KAAzE;AAAgF,QAAA,YAAY,EAAE,KAAKL,KAAL,CAAWO,YAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAxC,CAApB;AACA,WAAKI,QAAL,CAAc;AAAET,QAAAA,MAAM,EAAEP,KAAK,CAACe,aAAD;AAAf,OAAd;AACH;AAEJ;;AAGDE,EAAAA,MAAM,GAAG;AACL,wBAEI;AAAK,MAAA,EAAE,EAAC,iBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKX,KAAL,CAAWC,MADhB,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKF,KAAL,CAAWE,MAAX,CAAkB,CAAlB,EAAqBW,UAAzB,CAFJ,CAFJ;AAYH;;AAjCsC;;AAoC3C,eAAehB,YAAf","sourcesContent":["import React from 'react';\r\nimport '../../css/tweets/TweetSection.css';\r\nimport Tweet from './tweet.js';\r\nimport TweetEdit from './tweetEdit.js';\r\n\r\nconst clone = require('rfdc')();\r\n\r\nclass TweetSection extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            tweets: props.tweets.map((tweet, index) => <Tweet tweet={tweet} twitterAccounts={this.props.twitterAccounts} index={index} refreshTweet={this.props.refreshTweet} />)\r\n        };\r\n    }\r\n\r\n    componentDidUpate(prevProps) {\r\n\r\n        if (this.props.tweets != prevProps.tweets) {\r\n\r\n            let updatedTweets = this.props.tweets.map((tweet, index) => <Tweet tweet={tweet} twitterAccounts={this.props.twitterAccounts} index={index} refreshTweet={this.props.refreshTweet} />)\r\n            this.setState({ tweets: clone(updatedTweets) });\r\n        }\r\n\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n\r\n            <div id=\"TweetsContainer\">\r\n                {this.state.tweets}\r\n                <p>{this.props.tweets[0].tweet_text}</p>\r\n                 \r\n\r\n                \r\n                \r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default TweetSection;"]},"metadata":{},"sourceType":"module"}