{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\streamToggle\\\\frontend\\\\src\\\\components\\\\tweets\\\\newTweet.js\";\nimport React from 'react';\nimport '../../css/tweets/NewTweet.css';\nimport NewTweetForm from './tweetEdit.js';\n\nclass NewTweet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      componentState: 'Button'\n    };\n    this.handleSubmit = that.handleSubmit.bind(this);\n    this.changeComponentState = this.changeComponentState.bind(this);\n    this.setCreateTweetState = this.setCreateTweetState.bind(this);\n  }\n\n  changeComponentState(newState) {\n    if (newState === \"Display\") {\n      newState = 'Button';\n    }\n\n    this.setState({\n      componentState: newState\n    });\n  }\n\n  setCreateTweetState() {\n    this.changeComponentState(\"CreateTweet\");\n  }\n\n  async handleSubmit(event) {\n    //We have to use a custom submit handler because the post_id wouldn't be included in the form data. \n    //We also collect the edited tweet in the database in the http response and refresh the tweets in our REACT state to reflect the new state of the database\n    event.preventDefault();\n    let newTweetData = new FormData();\n    newTweetData.append(\"account_id\", this.state.tweetEdits.account_id);\n    newTweetData.append(\"tweet_title\", this.state.tweetEdits.tweet_title);\n    newTweetData.append(\"tweet_text\", this.state.tweetEdits.tweet_text);\n    newTweetData.append(\"username\", this.props.username);\n    let requestUrl = \"/createTweet/\";\n    let request = new Request(requestUrl, {\n      method: 'POST',\n      body: newTweetData\n    });\n    await fetch(request);\n    this.setState({\n      componentState: \"Button\"\n    });\n    this.props.updateTweets();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, this.state.componentState === \"Button\" ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"NewTweetBtn\",\n      onClick: this.setCreateTweetState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }\n    }, \"New Tweet\") : this.state.componentState === \"CreateTweet\" ? /*#__PURE__*/React.createElement(NewTweetForm, {\n      tweet: {},\n      handleSubmit: this.handleSubmit,\n      onChangeTweetState: this.changeComponentState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    }) : '');\n  }\n\n}\n\nexport default NewTweet;","map":{"version":3,"sources":["C:/repos/streamToggle/frontend/src/components/tweets/newTweet.js"],"names":["React","NewTweetForm","NewTweet","Component","constructor","props","state","componentState","handleSubmit","that","bind","changeComponentState","setCreateTweetState","newState","setState","event","preventDefault","newTweetData","FormData","append","tweetEdits","account_id","tweet_title","tweet_text","username","requestUrl","request","Request","method","body","fetch","updateTweets","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,+BAAP;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,QAAN,SAAuBF,KAAK,CAACG,SAA7B,CAAuC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,cAAc,EAAE;AADP,KAAb;AAIA,SAAKC,YAAL,GAAoBC,IAAI,CAACD,YAAL,CAAkBE,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BD,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKE,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBF,IAAzB,CAA8B,IAA9B,CAA3B;AACH;;AAEDC,EAAAA,oBAAoB,CAACE,QAAD,EAAW;AAE3B,QAAIA,QAAQ,KAAK,SAAjB,EAA4B;AAAEA,MAAAA,QAAQ,GAAG,QAAX;AAAsB;;AAEpD,SAAKC,QAAL,CAAc;AAAEP,MAAAA,cAAc,EAAEM;AAAlB,KAAd;AAEH;;AAEDD,EAAAA,mBAAmB,GAAG;AAElB,SAAKD,oBAAL,CAA0B,aAA1B;AAEH;;AAED,QAAMH,YAAN,CAAmBO,KAAnB,EAA0B;AAAE;AACxB;AACAA,IAAAA,KAAK,CAACC,cAAN;AAEA,QAAIC,YAAY,GAAG,IAAIC,QAAJ,EAAnB;AAEAD,IAAAA,YAAY,CAACE,MAAb,CAAoB,YAApB,EAAkC,KAAKb,KAAL,CAAWc,UAAX,CAAsBC,UAAxD;AACAJ,IAAAA,YAAY,CAACE,MAAb,CAAoB,aAApB,EAAmC,KAAKb,KAAL,CAAWc,UAAX,CAAsBE,WAAzD;AACAL,IAAAA,YAAY,CAACE,MAAb,CAAoB,YAApB,EAAkC,KAAKb,KAAL,CAAWc,UAAX,CAAsBG,UAAxD;AACAN,IAAAA,YAAY,CAACE,MAAb,CAAoB,UAApB,EAAgC,KAAKd,KAAL,CAAWmB,QAA3C;AAEA,QAAIC,UAAU,GAAG,eAAjB;AAEA,QAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAYF,UAAZ,EACV;AACIG,MAAAA,MAAM,EAAE,MADZ;AAEIC,MAAAA,IAAI,EAAEZ;AAFV,KADU,CAAd;AAMA,UAAMa,KAAK,CAACJ,OAAD,CAAX;AAEA,SAAKZ,QAAL,CAAc;AAAEP,MAAAA,cAAc,EAAE;AAAlB,KAAd;AACA,SAAKF,KAAL,CAAW0B,YAAX;AAEH;;AAGDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQ,KAAK1B,KAAL,CAAWC,cAAX,KAA8B,QAA9B,gBACA;AAAK,MAAA,SAAS,EAAC,aAAf;AAA6B,MAAA,OAAO,EAAE,KAAKK,mBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADA,GAEA,KAAKN,KAAL,CAAWC,cAAX,KAA8B,aAA9B,gBACA,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAE,EAArB;AAAyB,MAAA,YAAY,EAAE,KAAKC,YAA5C;AAA0D,MAAA,kBAAkB,EAAE,KAAKG,oBAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,GAC6G,EALrH,CADJ;AAWH;;AAlEkC;;AAsEvC,eAAeT,QAAf","sourcesContent":["import React from 'react';\r\nimport '../../css/tweets/NewTweet.css';\r\nimport NewTweetForm from './tweetEdit.js';\r\n\r\nclass NewTweet extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            componentState: 'Button'\r\n        };\r\n\r\n        this.handleSubmit = that.handleSubmit.bind(this);\r\n        this.changeComponentState = this.changeComponentState.bind(this);\r\n        this.setCreateTweetState = this.setCreateTweetState.bind(this);\r\n    }\r\n\r\n    changeComponentState(newState) {\r\n\r\n        if (newState === \"Display\") { newState = 'Button'; }\r\n\r\n        this.setState({ componentState: newState });\r\n\r\n    }\r\n\r\n    setCreateTweetState() {\r\n\r\n        this.changeComponentState(\"CreateTweet\");\r\n\r\n    }\r\n\r\n    async handleSubmit(event) { //We have to use a custom submit handler because the post_id wouldn't be included in the form data. \r\n        //We also collect the edited tweet in the database in the http response and refresh the tweets in our REACT state to reflect the new state of the database\r\n        event.preventDefault();\r\n\r\n        let newTweetData = new FormData();\r\n\r\n        newTweetData.append(\"account_id\", this.state.tweetEdits.account_id);\r\n        newTweetData.append(\"tweet_title\", this.state.tweetEdits.tweet_title);\r\n        newTweetData.append(\"tweet_text\", this.state.tweetEdits.tweet_text);\r\n        newTweetData.append(\"username\", this.props.username);\r\n\r\n        let requestUrl = \"/createTweet/\";\r\n\r\n        let request = new Request(requestUrl,\r\n            {\r\n                method: 'POST',\r\n                body: newTweetData\r\n            });\r\n\r\n        await fetch(request);\r\n\r\n        this.setState({ componentState: \"Button\" });\r\n        this.props.updateTweets();\r\n      \r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.componentState === \"Button\" ?\r\n                    <div className=\"NewTweetBtn\" onClick={this.setCreateTweetState}>New Tweet</div> :\r\n                    this.state.componentState === \"CreateTweet\" ?\r\n                    <NewTweetForm tweet={{}} handleSubmit={this.handleSubmit} onChangeTweetState={this.changeComponentState}/> : ''\r\n\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default NewTweet;"]},"metadata":{},"sourceType":"module"}