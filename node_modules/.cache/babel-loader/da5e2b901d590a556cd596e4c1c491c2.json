{"ast":null,"code":"import { endPoints } from \"../../configs/mainConfig.js\";\n\nfunction UserAccountMessenger() {}\n\n_c = UserAccountMessenger;\n\nUserAccountMessenger.prototype.getUsername = function () {\n  fetch(endPoints.getUsername, {\n    method: 'GET',\n    credentials: 'include'\n  }).then(response => response.text()).then(data => this.setState({\n    username: data\n  }));\n};\n\nUserAccountMessenger.prototype.login = async function (loginData) {\n  let loginSuccessful = false;\n  let request = new Request(endPoints.login, {\n    method: 'POST',\n    credentials: 'include',\n    body: loginData\n  });\n  let response = await fetch(request);\n  let data = await response.json();\n  loginSuccessful = data.loginSuccessful;\n  if (!loginSuccessful) console.log('login was unsuccessful on server side');\n  return loginSuccessful;\n};\n\nUserAccountMessenger.prototype.logout = async function () {\n  fetch(endPoints.logout, {\n    method: 'POST',\n    credentials: 'include'\n  });\n  document.cookie = \"sessionId=;max-age=0;expires=-1\";\n  document.cookie = \"loggedIn=;max-age=0;expires=-1\";\n  window.location.reload();\n};\n\nUserAccountMessenger.prototype.createAccount = async function (newUserData) {\n  let createUserRequest = new Request(endPoints.createUser, {\n    method: 'POST',\n    credentials: 'include',\n    body: newUserData\n  });\n  await fetch(createUserRequest);\n  let loginSuccessful = await this.login(newUserData);\n  return loginSuccessful;\n};\n\nUserAccountMessenger.prototype.deleteUserAccount = async function () {\n  await fetch(endPoints.deleteUserAccount, {\n    method: 'POST',\n    credentials: 'include'\n  });\n};\n\nexport default new UserAccountMessenger();\n\nvar _c;\n\n$RefreshReg$(_c, \"UserAccountMessenger\");","map":{"version":3,"sources":["c:/repos/smtFrontend/src/services/messenger/userAccountMessenger.js"],"names":["endPoints","UserAccountMessenger","prototype","getUsername","fetch","method","credentials","then","response","text","data","setState","username","login","loginData","loginSuccessful","request","Request","body","json","console","log","logout","document","cookie","window","location","reload","createAccount","newUserData","createUserRequest","createUser","deleteUserAccount"],"mappings":"AAAA,SAASA,SAAT,QAA0B,6BAA1B;;AAGA,SAASC,oBAAT,GAAgC,CAAG;;KAA1BA,oB;;AAGTA,oBAAoB,CAACC,SAArB,CAA+BC,WAA/B,GAA6C,YAAY;AACrDC,EAAAA,KAAK,CAACJ,SAAS,CAACG,WAAX,EAAwB;AAAEE,IAAAA,MAAM,EAAE,KAAV;AAAiBC,IAAAA,WAAW,EAAE;AAA9B,GAAxB,CAAL,CACKC,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUG,IAAI,IAAI,KAAKC,QAAL,CAAc;AAAEC,IAAAA,QAAQ,EAAEF;AAAZ,GAAd,CAFlB;AAGH,CAJD;;AAMAT,oBAAoB,CAACC,SAArB,CAA+BW,KAA/B,GAAuC,gBAAgBC,SAAhB,EAA2B;AAC9D,MAAIC,eAAe,GAAG,KAAtB;AAEA,MAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAYjB,SAAS,CAACa,KAAtB,EACV;AACIR,IAAAA,MAAM,EAAE,MADZ;AAEIC,IAAAA,WAAW,EAAE,SAFjB;AAGIY,IAAAA,IAAI,EAAEJ;AAHV,GADU,CAAd;AAOA,MAAIN,QAAQ,GAAG,MAAMJ,KAAK,CAACY,OAAD,CAA1B;AACA,MAAIN,IAAI,GAAG,MAAMF,QAAQ,CAACW,IAAT,EAAjB;AACAJ,EAAAA,eAAe,GAAGL,IAAI,CAACK,eAAvB;AAEA,MAAI,CAACA,eAAL,EAAsBK,OAAO,CAACC,GAAR,CAAY,uCAAZ;AAEtB,SAAON,eAAP;AACH,CAjBD;;AAmBAd,oBAAoB,CAACC,SAArB,CAA+BoB,MAA/B,GAAwC,kBAAkB;AACtDlB,EAAAA,KAAK,CAACJ,SAAS,CAACsB,MAAX,EAAmB;AAAEjB,IAAAA,MAAM,EAAE,MAAV;AAAkBC,IAAAA,WAAW,EAAE;AAA/B,GAAnB,CAAL;AAEAiB,EAAAA,QAAQ,CAACC,MAAT,GAAkB,iCAAlB;AACAD,EAAAA,QAAQ,CAACC,MAAT,GAAkB,gCAAlB;AAEAC,EAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH,CAPD;;AASA1B,oBAAoB,CAACC,SAArB,CAA+B0B,aAA/B,GAA+C,gBAAgBC,WAAhB,EAA6B;AACxE,MAAIC,iBAAiB,GAAG,IAAIb,OAAJ,CAAYjB,SAAS,CAAC+B,UAAtB,EACpB;AACI1B,IAAAA,MAAM,EAAE,MADZ;AAEIC,IAAAA,WAAW,EAAE,SAFjB;AAGIY,IAAAA,IAAI,EAAEW;AAHV,GADoB,CAAxB;AAOA,QAAMzB,KAAK,CAAC0B,iBAAD,CAAX;AAEA,MAAIf,eAAe,GAAG,MAAM,KAAKF,KAAL,CAAWgB,WAAX,CAA5B;AAEA,SAAOd,eAAP;AACH,CAbD;;AAeAd,oBAAoB,CAACC,SAArB,CAA+B8B,iBAA/B,GAAmD,kBAAkB;AACjE,QAAM5B,KAAK,CAACJ,SAAS,CAACgC,iBAAX,EAA8B;AAAE3B,IAAAA,MAAM,EAAE,MAAV;AAAkBC,IAAAA,WAAW,EAAE;AAA/B,GAA9B,CAAX;AACH,CAFD;;AAKA,eAAe,IAAIL,oBAAJ,EAAf","sourcesContent":["import { endPoints } from '~/configs/mainConfig.js';\r\n\r\n\r\nfunction UserAccountMessenger() { }\r\n\r\n\r\nUserAccountMessenger.prototype.getUsername = function () {\r\n    fetch(endPoints.getUsername, { method: 'GET', credentials: 'include' })\r\n        .then(response => response.text())\r\n        .then(data => this.setState({ username: data }));\r\n};\r\n\r\nUserAccountMessenger.prototype.login = async function (loginData) {\r\n    let loginSuccessful = false;\r\n\r\n    let request = new Request(endPoints.login,\r\n        {\r\n            method: 'POST',\r\n            credentials: 'include',\r\n            body: loginData,\r\n        });\r\n\r\n    let response = await fetch(request);\r\n    let data = await response.json();\r\n    loginSuccessful = data.loginSuccessful;\r\n\r\n    if (!loginSuccessful) console.log('login was unsuccessful on server side');\r\n\r\n    return loginSuccessful;\r\n}\r\n\r\nUserAccountMessenger.prototype.logout = async function () {\r\n    fetch(endPoints.logout, { method: 'POST', credentials: 'include' });\r\n\r\n    document.cookie = \"sessionId=;max-age=0;expires=-1\";\r\n    document.cookie = \"loggedIn=;max-age=0;expires=-1\";\r\n\r\n    window.location.reload();\r\n}\r\n\r\nUserAccountMessenger.prototype.createAccount = async function (newUserData) {\r\n    let createUserRequest = new Request(endPoints.createUser,\r\n        {\r\n            method: 'POST',\r\n            credentials: 'include',\r\n            body: newUserData\r\n        });\r\n\r\n    await fetch(createUserRequest);\r\n\r\n    let loginSuccessful = await this.login(newUserData);\r\n\r\n    return loginSuccessful;\r\n}\r\n\r\nUserAccountMessenger.prototype.deleteUserAccount = async function () {\r\n    await fetch(endPoints.deleteUserAccount, { method: 'POST', credentials: 'include' });\r\n}\r\n\r\n\r\nexport default new UserAccountMessenger();"]},"metadata":{},"sourceType":"module"}