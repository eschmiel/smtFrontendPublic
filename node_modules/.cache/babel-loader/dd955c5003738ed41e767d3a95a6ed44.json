{"ast":null,"code":"var _jsxFileName = \"c:\\\\repos\\\\smtFrontend\\\\src\\\\components\\\\loggedIn.js\";\nimport React from 'react';\nimport { userAccountMessenger } from \"../services/services.js\";\nimport { twitterAccountMessenger } from \"../services/services.js\";\nimport { tweetMessenger } from \"../services/services.js\";\nimport LinkFirstAccount from './linkFirstAccount.js';\nimport FirstTweet from './firstTweet.js';\nimport Menu from './menu.js';\nimport Tweet from './tweets/tweet.js';\nimport NewTweet from \"./tweets/newTweet\";\n\nconst clone = require('rfdc')();\n\nclass LoggedIn extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tweets: [],\n      twitterAccounts: [],\n      username: ''\n    };\n    this.getLinkedAccounts = twitterAccountMessenger.getLinkedAccounts.bind(this);\n    this.getTweets = tweetMessenger.getTweets.bind(this);\n    this.getUsername = userAccountMessenger.getUsername.bind(this);\n    this.refreshTweet = this.refreshTweet.bind(this);\n    this.buildTweetComponents = this.buildTweetComponents.bind(this);\n  }\n\n  componentDidMount() {\n    this.getTweets();\n    this.getLinkedAccounts();\n    this.getUsername();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Menubar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"./images/smt-logo.png\",\n      alt: \"Social Media Toggle by Schmiel logo\",\n      className: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Menu, {\n      twitter_accounts: this.state.twitterAccounts,\n      refreshLinkedAccounts: this.getLinkedAccounts,\n      refreshTweets: this.getTweets,\n      username: this.state.username,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }\n    })), this.state.twitterAccounts.length === 0 ? /*#__PURE__*/React.createElement(LinkFirstAccount, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 63\n      }\n    }) : this.state.tweets.length === 0 ? /*#__PURE__*/React.createElement(FirstTweet, {\n      username: this.state.username,\n      updateTweets: this.getTweets,\n      twitterAccounts: this.state.twitterAccounts,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 54\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      id: \"TweetsContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }\n    }, this.buildTweetComponents(this.state.tweets), /*#__PURE__*/React.createElement(NewTweet, {\n      username: this.state.username,\n      updateTweets: this.getTweets,\n      twitterAccounts: this.state.twitterAccounts,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 33\n      }\n    })));\n  }\n\n  buildTweetComponents(tweetObjs) {\n    let tweetComponents = tweetObjs.map((tweet, index) => /*#__PURE__*/React.createElement(Tweet, {\n      tweet: tweet,\n      twitterAccounts: this.state.twitterAccounts,\n      refreshTweet: this.refreshTweet,\n      updateTweets: this.getTweets,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 63\n      }\n    }));\n    return tweetComponents;\n  }\n\n  refreshTweet(currentTweet) {\n    let index = this.state.tweets.findIndex(element => element.post_id === currentTweet.post_id);\n\n    if (index !== -1) {\n      let editsContainer = clone(this.state.tweets);\n      editsContainer[index] = clone(currentTweet);\n      this.setState({\n        tweets: editsContainer\n      });\n    }\n  }\n\n}\n\nexport default LoggedIn;","map":{"version":3,"sources":["c:/repos/smtFrontend/src/components/loggedIn.js"],"names":["React","userAccountMessenger","twitterAccountMessenger","tweetMessenger","LinkFirstAccount","FirstTweet","Menu","Tweet","NewTweet","clone","require","LoggedIn","Component","constructor","props","state","tweets","twitterAccounts","username","getLinkedAccounts","bind","getTweets","getUsername","refreshTweet","buildTweetComponents","componentDidMount","render","length","tweetObjs","tweetComponents","map","tweet","index","currentTweet","findIndex","element","post_id","editsContainer","setState"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,SAASC,uBAAT,QAAwC,yBAAxC;AACA,SAASC,cAAT,QAA+B,yBAA/B;AAEA,OAAOC,gBAAP,MAA6B,uBAA7B;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,QAAP,MAAqB,mBAArB;;AAEA,MAAMC,KAAK,GAAGC,OAAO,CAAC,MAAD,CAAP,EAAd;;AAEA,MAAMC,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,EADC;AAETC,MAAAA,eAAe,EAAE,EAFR;AAGTC,MAAAA,QAAQ,EAAE;AAHD,KAAb;AAMA,SAAKC,iBAAL,GAAyBjB,uBAAuB,CAACiB,iBAAxB,CAA0CC,IAA1C,CAA+C,IAA/C,CAAzB;AACA,SAAKC,SAAL,GAAiBlB,cAAc,CAACkB,SAAf,CAAyBD,IAAzB,CAA8B,IAA9B,CAAjB;AACA,SAAKE,WAAL,GAAmBrB,oBAAoB,CAACqB,WAArB,CAAiCF,IAAjC,CAAsC,IAAtC,CAAnB;AAEA,SAAKG,YAAL,GAAoB,KAAKA,YAAL,CAAkBH,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKI,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BJ,IAA1B,CAA+B,IAA/B,CAA5B;AACH;;AAGDK,EAAAA,iBAAiB,GAAG;AAChB,SAAKJ,SAAL;AACA,SAAKF,iBAAL;AACA,SAAKG,WAAL;AACH;;AAGDI,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,GAAG,EAAC,uBAAT;AAAiC,MAAA,GAAG,EAAC,qCAArC;AAA2E,MAAA,SAAS,EAAC,MAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,IAAD;AAAM,MAAA,gBAAgB,EAAE,KAAKX,KAAL,CAAWE,eAAnC;AAAoD,MAAA,qBAAqB,EAAE,KAAKE,iBAAhF;AAAmG,MAAA,aAAa,EAAE,KAAKE,SAAvH;AAAkI,MAAA,QAAQ,EAAE,KAAKN,KAAL,CAAWG,QAAvJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,EAMQ,KAAKH,KAAL,CAAWE,eAAX,CAA2BU,MAA3B,KAAsC,CAAtC,gBAA0C,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA1C,GACA,KAAKZ,KAAL,CAAWC,MAAX,CAAkBW,MAAlB,KAA6B,CAA7B,gBAAiC,oBAAC,UAAD;AAAY,MAAA,QAAQ,EAAE,KAAKZ,KAAL,CAAWG,QAAjC;AAA2C,MAAA,YAAY,EAAE,KAAKG,SAA9D;AAAyE,MAAA,eAAe,EAAE,KAAKN,KAAL,CAAWE,eAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAjC,gBACA;AAAK,MAAA,EAAE,EAAC,iBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKO,oBAAL,CAA0B,KAAKT,KAAL,CAAWC,MAArC,CADL,eAEY,oBAAC,QAAD;AAAU,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWG,QAA/B;AAAyC,MAAA,YAAY,EAAE,KAAKG,SAA5D;AAAuE,MAAA,eAAe,EAAE,KAAKN,KAAL,CAAWE,eAAnG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFZ,CARR,CADJ;AAgBH;;AAGDO,EAAAA,oBAAoB,CAACI,SAAD,EAAY;AAC5B,QAAIC,eAAe,GAAGD,SAAS,CAACE,GAAV,CAAc,CAACC,KAAD,EAAQC,KAAR,kBAAkB,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAED,KAAd;AAAqB,MAAA,eAAe,EAAE,KAAKhB,KAAL,CAAWE,eAAjD;AAAkE,MAAA,YAAY,EAAE,KAAKM,YAArF;AAAmG,MAAA,YAAY,EAAE,KAAKF,SAAtH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAhC,CAAtB;AAEA,WAAQQ,eAAR;AACH;;AAGDN,EAAAA,YAAY,CAACU,YAAD,EAAe;AACvB,QAAID,KAAK,GAAG,KAAKjB,KAAL,CAAWC,MAAX,CAAkBkB,SAAlB,CAA4BC,OAAO,IAAIA,OAAO,CAACC,OAAR,KAAoBH,YAAY,CAACG,OAAxE,CAAZ;;AAEA,QAAIJ,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,UAAIK,cAAc,GAAG5B,KAAK,CAAC,KAAKM,KAAL,CAAWC,MAAZ,CAA1B;AAEAqB,MAAAA,cAAc,CAACL,KAAD,CAAd,GAAwBvB,KAAK,CAACwB,YAAD,CAA7B;AAEA,WAAKK,QAAL,CAAc;AAAEtB,QAAAA,MAAM,EAAEqB;AAAV,OAAd;AACH;AACJ;;AA/DkC;;AAkEvC,eAAe1B,QAAf","sourcesContent":["import React from 'react';\r\nimport { userAccountMessenger } from '~/services/services.js';\r\nimport { twitterAccountMessenger } from '~/services/services.js';\r\nimport { tweetMessenger } from '~/services/services.js';\r\n\r\nimport LinkFirstAccount from './linkFirstAccount.js';\r\nimport FirstTweet from './firstTweet.js';\r\nimport Menu from './menu.js';\r\nimport Tweet from './tweets/tweet.js';\r\nimport NewTweet from '~./components/tweets/newTweet';\r\n\r\nconst clone = require('rfdc')();\r\n\r\nclass LoggedIn extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            tweets: [],\r\n            twitterAccounts: [],\r\n            username: ''\r\n        };\r\n\r\n        this.getLinkedAccounts = twitterAccountMessenger.getLinkedAccounts.bind(this);\r\n        this.getTweets = tweetMessenger.getTweets.bind(this);\r\n        this.getUsername = userAccountMessenger.getUsername.bind(this);\r\n\r\n        this.refreshTweet = this.refreshTweet.bind(this);\r\n        this.buildTweetComponents = this.buildTweetComponents.bind(this);        \r\n    }\r\n\r\n \r\n    componentDidMount() {\r\n        this.getTweets();\r\n        this.getLinkedAccounts();  \r\n        this.getUsername();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"Menubar\">\r\n                    <img src=\"./images/smt-logo.png\" alt=\"Social Media Toggle by Schmiel logo\" className=\"logo\" />\r\n                    <Menu twitter_accounts={this.state.twitterAccounts} refreshLinkedAccounts={this.getLinkedAccounts} refreshTweets={this.getTweets} username={this.state.username}/>\r\n                </div>                \r\n                {\r\n                    this.state.twitterAccounts.length === 0 ? <LinkFirstAccount /> :\r\n                    this.state.tweets.length === 0 ? <FirstTweet username={this.state.username} updateTweets={this.getTweets} twitterAccounts={this.state.twitterAccounts}/> :\r\n                    <div id=\"TweetsContainer\"> \r\n                        {this.buildTweetComponents(this.state.tweets)}\r\n                                <NewTweet username={this.state.username} updateTweets={this.getTweets} twitterAccounts={this.state.twitterAccounts}/> \r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    buildTweetComponents(tweetObjs) {\r\n        let tweetComponents = tweetObjs.map((tweet, index) => <Tweet tweet={tweet} twitterAccounts={this.state.twitterAccounts} refreshTweet={this.refreshTweet} updateTweets={this.getTweets}/>)\r\n\r\n        return (tweetComponents);\r\n    }\r\n\r\n\r\n    refreshTweet(currentTweet) {\r\n        let index = this.state.tweets.findIndex(element => element.post_id === currentTweet.post_id);\r\n\r\n        if (index !== -1) {\r\n            let editsContainer = clone(this.state.tweets);\r\n\r\n            editsContainer[index] = clone(currentTweet);\r\n\r\n            this.setState({ tweets: editsContainer });\r\n        }\r\n    }\r\n}\r\n\r\nexport default LoggedIn;"]},"metadata":{},"sourceType":"module"}