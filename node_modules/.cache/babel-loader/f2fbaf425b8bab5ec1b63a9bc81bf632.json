{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\streamToggle\\\\frontend\\\\src\\\\components\\\\tweets\\\\tweet.js\";\nimport React from 'react';\nimport '../../css/tweets/Tweet.css';\nimport TweetDisplay from './tweetDisplay.js';\nimport TweetEdit from './tweetEdit.js';\nimport TweetDelete from './tweetDeleteMenu.js';\n\nclass Tweet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setTweetState = this.setTweetState.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = {\n      tweetState: 'Display'\n    };\n  }\n\n  setTweetState(newTweetState) {\n    this.setState({\n      tweetState: newTweetState\n    });\n  }\n\n  async handleSubmit(event) {\n    //We have to use a custom submit handler because the post_id wouldn't be included in the form data. \n    //We also collect the edited tweet in the database in the http response and refresh the tweets in our REACT state to reflect the new state of the database\n    event.preventDefault();\n    let edits = new FormData();\n    edits.append(\"account_id\", this.state.tweetEdits.account_id);\n    edits.append(\"tweet_title\", this.state.tweetEdits.tweet_title);\n    edits.append(\"tweet_text\", this.state.tweetEdits.tweet_text);\n    let requestUrl = \"/editTweet/\" + this.state.tweetEdits.post_id;\n    let request = new Request(requestUrl, {\n      method: 'POST',\n      body: edits\n    });\n    console.log(\"tweetEdits: \");\n    console.log(this.state.tweetEdits);\n    let res = await fetch(request);\n    let currentTweet = await res.json();\n    this.props.refreshTweet(currentTweet);\n    this.props.onChangeTweetState('Display');\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, this.state.tweetState === 'Display' ? /*#__PURE__*/React.createElement(TweetDisplay, {\n      tweet: this.props.tweet,\n      onChangeTweetState: this.setTweetState,\n      twitterAccounts: this.props.twitterAccounts,\n      refreshTweet: this.props.refreshTweet,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 56\n      }\n    }) : this.state.tweetState === 'Edit' ? /*#__PURE__*/React.createElement(TweetEdit, {\n      tweet: this.props.tweet,\n      twitterAccounts: this.props.twitterAccounts,\n      onChangeTweetState: this.setTweetState,\n      refreshTweet: this.props.refreshTweet,\n      handleSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 53\n      }\n    }) : this.state.tweetState === 'Delete' ? /*#__PURE__*/React.createElement(TweetDelete, {\n      tweet: this.props.tweet,\n      onChangeTweetState: this.setTweetState,\n      updateTweets: this.props.updateTweets,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 55\n      }\n    }) : '');\n  }\n\n}\n\nexport default Tweet;","map":{"version":3,"sources":["C:/repos/streamToggle/frontend/src/components/tweets/tweet.js"],"names":["React","TweetDisplay","TweetEdit","TweetDelete","Tweet","Component","constructor","props","setTweetState","bind","handleSubmit","state","tweetState","newTweetState","setState","event","preventDefault","edits","FormData","append","tweetEdits","account_id","tweet_title","tweet_text","requestUrl","post_id","request","Request","method","body","console","log","res","fetch","currentTweet","json","refreshTweet","onChangeTweetState","render","tweet","twitterAccounts","updateTweets"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport '../../css/tweets/Tweet.css';\r\nimport TweetDisplay from './tweetDisplay.js';\r\nimport TweetEdit from './tweetEdit.js';\r\nimport TweetDelete from './tweetDeleteMenu.js';\r\n\r\nclass Tweet extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.setTweetState = this.setTweetState.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n        this.state = {\r\n            tweetState: 'Display'\r\n        };\r\n\r\n\r\n    }\r\n\r\n    setTweetState(newTweetState) {\r\n        this.setState({ tweetState: newTweetState });\r\n    } \r\n\r\n    async handleSubmit(event) { //We have to use a custom submit handler because the post_id wouldn't be included in the form data. \r\n        //We also collect the edited tweet in the database in the http response and refresh the tweets in our REACT state to reflect the new state of the database\r\n        event.preventDefault();\r\n\r\n        let edits = new FormData();\r\n\r\n        edits.append(\"account_id\", this.state.tweetEdits.account_id);\r\n        edits.append(\"tweet_title\", this.state.tweetEdits.tweet_title);\r\n        edits.append(\"tweet_text\", this.state.tweetEdits.tweet_text);\r\n\r\n        let requestUrl = \"/editTweet/\" + this.state.tweetEdits.post_id;\r\n\r\n        let request = new Request(requestUrl,\r\n            {\r\n                method: 'POST',\r\n                body: edits\r\n            });\r\n\r\n        console.log(\"tweetEdits: \");\r\n        console.log(this.state.tweetEdits);\r\n\r\n        let res = await fetch(request);\r\n        let currentTweet = await res.json();\r\n        this.props.refreshTweet(currentTweet);\r\n        this.props.onChangeTweetState('Display');\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                {this.state.tweetState === 'Display' ? <TweetDisplay tweet={this.props.tweet} onChangeTweetState={this.setTweetState} twitterAccounts={this.props.twitterAccounts} refreshTweet={this.props.refreshTweet}/> :\r\n                 this.state.tweetState === 'Edit' ? <TweetEdit tweet={this.props.tweet} twitterAccounts={this.props.twitterAccounts} onChangeTweetState={this.setTweetState} refreshTweet={this.props.refreshTweet} handleSubmit={this.handleSubmit}/> :\r\n                 this.state.tweetState === 'Delete' ? <TweetDelete tweet = {this.props.tweet} onChangeTweetState={this.setTweetState} updateTweets={this.props.updateTweets}/> : '' }\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tweet;"]},"metadata":{},"sourceType":"module"}